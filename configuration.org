#+TITLE: Emacs Configuration
#+AUTHOR: Hamza Khan-Cheema
#+EMAIL: hamzakc@gmail.com
#+OPTIONS: toc:nil num:nil

* Utilities
#+BEGIN_SRC emacs-lisp
(defun hrs/add-auto-mode (mode &rest patterns)
    "Add entries to `auto-mode-alist' to use `MODE' for all given file `PATTERNS'."
    (dolist (pattern patterns)
      (add-to-list 'auto-mode-alist (cons pattern mode))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (if (not server-mode)
    (server-start nil t))
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; xterm with the resource ?.VT100.modifyOtherKeys: 1
;; GNU Emacs >=24.4 sets xterm in this mode and define
;; some of the escape sequences but not all of them.
(defun character-apply-modifiers (c &rest modifiers)
  "Apply modifiers to the character C.
MODIFIERS must be a list of symbols amongst (meta control shift).
Return an event vector."
  (if (memq 'control modifiers) (setq c (if (or (and (<= ?@ c) (<= c ?_))
                                                (and (<= ?a c) (<= c ?z)))
                                            (logand c ?\x1f)
                                          (logior (lsh 1 26) c))))
  (if (memq 'meta modifiers) (setq c (logior (lsh 1 27) c)))
  (if (memq 'shift modifiers) (setq c (logior (lsh 1 25) c)))
  (vector c))
(defun my-eval-after-load-xterm ()
  (when (and (boundp 'xterm-extra-capabilities) (boundp 'xterm-function-map))
    (let ((c 32))
      (while (<= c 126)
        (mapc (lambda (x)
                (define-key xterm-function-map (format (car x) c)
                  (apply 'character-apply-modifiers c (cdr x))))
              '(;; with ?.VT100.formatOtherKeys: 0
                ("\e\[27;3;%d~" meta)
                ("\e\[27;5;%d~" control)
                ("\e\[27;6;%d~" control shift)
                ("\e\[27;7;%d~" control meta)
                ("\e\[27;8;%d~" control meta shift)
                ;; with ?.VT100.formatOtherKeys: 1
                ("\e\[%d;3u" meta)
                ("\e\[%d;5u" control)
                ("\e\[%d;6u" control shift)
                ("\e\[%d;7u" control meta)
                ("\e\[%d;8u" control meta shift)))
        (setq c (1+ c))))))
(eval-after-load "xterm" '(my-eval-after-load-xterm))
#+END_SRC

* Configure =use-package=

Always compile packages, and use the newest version available.

#+BEGIN_SRC emacs-lisp
  (use-package auto-compile
    :config (auto-compile-on-load-mode))
  (setq load-prefer-newer t)
#+END_SRC

Support for executing shell commands with sudo

#+BEGIN_SRC emacs-lisp
  (use-package sudo-ext)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell)
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize))
#+END_SRC

Keychain is a script that manages ssh-agent and gpg-agent.
#+BEGIN_SRC emacs-lisp
  (use-package keychain-environment)
#+END_SRC

Browse current file in github
#+BEGIN_SRC emacs-lisp
  (use-package browse-at-remote)
  (global-set-key (kbd "C-c g g") 'browse-at-remote)
#+END_SRC

Allows you to save the current window state and return to it after you have entered full

#+BEGIN_SRC emacs-lisp
(when (fboundp 'winner-mode)
      (winner-mode 1))
#+END_SRC

Show Emojis!!! :)
#+BEGIN_SRC emacs-lisp
  (use-package emojify)
  (add-hook 'after-init-hook #'global-emojify-mode)
#+END_SRC

* Set personal information
** Who am I? Where am I?

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Hamza Khan-Cheema"
        user-mail-address "hamzakc@gmail.com")
#+END_SRC

* Use sensible-defaults.el

Use [[https://github.com/hrs/sensible-defaults.el][sensible-defaults.el]] for some basic settings.

#+BEGIN_SRC emacs-lisp
  (load-file "~/.emacs.d/sensible-defaults.el")
  (sensible-defaults/use-all-settings)
  (sensible-defaults/use-all-keybindings)
  (sensible-defaults/backup-to-temp-directory)
#+END_SRC

* Evil-mode

I'd prefer not to expand abbrevs when I hit escape. That's always jarring and
usually not what I want. In particular, it makes working with Coq really
frustrating.

#+BEGIN_SRC emacs-lisp
  (setq evil-want-abbrev-expand-on-insert-exit nil)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package evil)
  (use-package evil-surround)
#+END_SRC

Use =evil=.

#+BEGIN_SRC emacs-lisp
  (evil-mode 1)
#+END_SRC

Enable =surround= everywhere.

#+BEGIN_SRC emacs-lisp
  (global-evil-surround-mode 1)
#+END_SRC

Bind =C-p= to fuzzy-finding files in the current project.

#+BEGIN_SRC emacs-lisp
  (define-key evil-normal-state-map (kbd "C-p") 'projectile-find-file)
#+END_SRC

Map 'jj' To get back to normal mode, using the key-chord package
#+BEGIN_SRC emacs-lisp
  (use-package key-chord)
  (setq key-chord-two-keys-delay 0.5)
  (key-chord-define evil-insert-state-map "jj" 'evil-normal-state)
  (key-chord-mode 1)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'evil
    (defalias #'forward-evil-word #'forward-evil-symbol)
    ;; make evil-search-word look for symbol rather than word boundaries
    (setq-default evil-symbol-word-search t))
#+END_SRC

* UI preferences

Lets show the time in the spacebar
#+BEGIN_SRC emacs-lisp
(display-time-mode 1)
#+END_SRC
** Tweak window chrome

I don't usually use the menu or scroll bar, and they take up useful space.

#+BEGIN_SRC emacs-lisp
  (tool-bar-mode 0)
  (menu-bar-mode 0)
  (when window-system
    (scroll-bar-mode -1))
#+END_SRC

The default frame title isn't useful. This binds it to the name of the current
project:

#+BEGIN_SRC emacs-lisp
  (setq frame-title-format '((:eval (projectile-project-name))))
#+END_SRC

The default frame title isn't useful. This binds it to the name of the current
project:

#+BEGIN_SRC emacs-lisp
  (setq frame-title-format '((:eval (projectile-project-name))))
#+END_SRC

** Use fancy lambdas

Why not?

#+BEGIN_SRC emacs-lisp
  (global-prettify-symbols-mode t)
#+END_SRC

** Nord-theme
#+BEGIN_SRC emacs-lisp
(use-package nord-theme
  :init
  (setq nord-theme t)
  :config
  (load-theme 'nord t))
#+END_SRC
** Disable visual bell

=sensible-defaults= replaces the audible bell with a visual one, but I really
don't even want that (and my Emacs/Mac pair renders it poorly). This disables
the bell altogether.

#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC

** Highlight the current line

=global-hl-line-mode= softly highlights the background color of the line
containing point. It makes it a bit easier to find point, and it's useful when
pairing or presenting code.

#+BEGIN_SRC emacs-lisp
  (when window-system
    (global-hl-line-mode))
#+END_SRC
** Scroll conservatively

When point goes outside the window, Emacs usually recenters the buffer point.
I'm not crazy about that. This changes scrolling behavior to only scroll as far
as point goes.

#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100)
#+END_SRC
** Disable scroll bars
#+BEGIN_SRC emacs-lisp
  (scroll-bar-mode -1)
#+END_SRC
** Hide certain modes from the modeline

I'd rather have only a few necessary mode identifiers on my modeline. This
either hides or "renames" a variety of major or minor modes using the =diminish=
package.

#+BEGIN_SRC emacs-lisp
  (use-package diminish)
	(defmacro diminish-minor-mode (filename mode &optional abbrev)
    `(eval-after-load (symbol-name ,filename)
       '(diminish ,mode ,abbrev)))

  (defmacro diminish-major-mode (mode-hook abbrev)
    `(add-hook ,mode-hook
               (lambda () (setq mode-name ,abbrev))))

  (diminish-minor-mode 'abbrev 'abbrev-mode)
  (diminish-minor-mode 'simple 'auto-fill-function)
  (diminish-minor-mode 'company 'company-mode)
  (diminish-minor-mode 'eldoc 'eldoc-mode)
  (diminish-minor-mode 'flycheck 'flycheck-mode)
  (diminish-minor-mode 'flyspell 'flyspell-mode)
  (diminish-minor-mode 'global-whitespace 'global-whitespace-mode)
  (diminish-minor-mode 'projectile 'projectile-mode)
  (diminish-minor-mode 'ruby-end 'ruby-end-mode)
  (diminish-minor-mode 'subword 'subword-mode)
  (diminish-minor-mode 'undo-tree 'undo-tree-mode)
  (diminish-minor-mode 'wrap-region 'wrap-region-mode)

  (diminish-minor-mode 'paredit 'paredit-mode " π")

  (diminish-major-mode 'emacs-lisp-mode-hook "el")
  (diminish-major-mode 'haskell-mode-hook "λ=")
  (diminish-major-mode 'lisp-interaction-mode-hook "λ")
  (diminish-major-mode 'python-mode-hook "Py")
#+END_SRC

** Highlight uncommitted changes

Use the =diff-hl= package to highlight changed-and-uncommitted lines when
programming.

#+BEGIN_SRC emacs-lisp
  (use-package diff-hl)
  (require 'diff-hl)

  (add-hook 'prog-mode-hook 'turn-on-diff-hl-mode)
  (add-hook 'vc-dir-mode-hook 'turn-on-diff-hl-mode)
#+END_SRC
** Spaceline
#+BEGIN_SRC emacs-lisp
(use-package spaceline
  :config
  (require 'spaceline-config)
    (setq spaceline-buffer-encoding-abbrev-p nil)
    (setq spaceline-line-column-p nil)
    (setq spaceline-line-p nil)
    (setq powerline-default-separator (quote arrow))
    (setq spaceline-highlight-face-func 'spaceline-highlight-face-evil-state)
    (spaceline-spacemacs-theme))
#+END_SRC

** Battery
#+BEGIN_SRC emacs-lisp
(use-package fancy-battery
  :config
    (setq fancy-battery-show-percentage t)
    (setq battery-update-interval 15)
    (if window-system
      (fancy-battery-mode)
      (display-battery-mode)))
#+END_SRC
** Relative Line Numbers
#+BEGIN_SRC emacs-lisp
(use-package linum-relative
  :config
    (setq linum-relative-current-symbol "")
    (add-hook 'prog-mode-hook 'linum-relative-mode))
#+END_SRC
** Helm
#+BEGIN_SRC emacs-lisp
(use-package helm
  :bind
  ("C-x C-f" . 'helm-find-files)
  ("C-x C-b" . 'helm-buffers-list)
  ("M-x" . 'helm-M-x)
  :config
  (defun daedreth/helm-hide-minibuffer ()
    (when (with-helm-buffer helm-echo-input-in-header-line)
      (let ((ov (make-overlay (point-min) (point-max) nil nil t)))
        (overlay-put ov 'window (selected-window))
        (overlay-put ov 'face
                     (let ((bg-color (face-background 'default nil)))
                       `(:background ,bg-color :foreground ,bg-color)))
        (setq-local cursor-type nil))))
  (add-hook 'helm-minibuffer-set-up-hook 'daedreth/helm-hide-minibuffer)
  (setq helm-autoresize-max-height 0
        helm-autoresize-min-height 40
        helm-M-x-fuzzy-match t
        helm-buffers-fuzzy-matching t
        helm-recentf-fuzzy-match t
        helm-semantic-fuzzy-match t
        helm-imenu-fuzzy-match t
        helm-split-window-in-side-p nil
        helm-move-to-line-cycle-in-source nil
        helm-ff-search-library-in-sexp t
        helm-scroll-amount 8
        helm-echo-input-in-header-line t)
  :init
  (helm-mode 1))
#+END_SRC

Helm Show Kill Ring
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-y") 'helm-show-kill-ring)
#+END_SRC

Helm Occur
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c h o") 'helm-occur)
#+END_SRC

** Dashboard
#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents  . 5)
                            (projects . 5)))
    (setq dashboard-banner-logo-title ""))
#+END_SRC
** Golden Ratio
#+BEGIN_SRC emacs-lisp
  (use-package golden-ratio
    :init
    (setq golden-ratio-adjust-factor 1
          golden-ratio-wide-adjust-factor 1)
    :config
    (progn
      (golden-ratio-mode)
      (dolist (f '(switch-window
                   avy-pop-mark
                   buf-move-left
                   buf-move-right
                   buf-move-up
                   buf-move-down
                   evil-avy-goto-word-or-subword-1
                   evil-avy-goto-char
                   evil-avy-goto-line
                   evil-window-delete
                   evil-window-split
                   evil-window-vsplit
                   evil-window-left
                   evil-window-right
                   evil-window-up
                   evil-window-down
                   evil-window-bottom-right
                   evil-window-top-left
                   evil-window-mru
                   evil-window-next
                   evil-window-prev
                   evil-window-new
                   evil-window-vnew
                   evil-window-rotate-upwards
                   evil-window-rotate-downwards
                   evil-window-move-very-top
                   evil-window-move-far-left
                   evil-window-move-far-right
                   evil-window-move-very-bottom
                   quit-window
                   select-window-0
                   select-window-1
                   select-window-2
                   select-window-3
                   select-window-4
                   select-window-5
                   select-window-6
                   select-window-7
                   select-window-8
                   select-window-9
                   windmove-left
                   windmove-right
                   windmove-up
                   windmove-down))
        (add-to-list 'golden-ratio-extra-commands f))))
    (golden-ratio-mode 1)
#+END_SRC
* PROGRAMMING environments
I like shallow indentation, but tabs are displayed as 8 characters by default.
This reduces that.

#+BEGIN_SRC emacs-lisp
  (setq fill-column 80) ;; M-q should fill at 80 chars, not 75
  (setq-default tab-width 2)
#+END_SRC

Compilation output goes to the =*compilation*= buffer. I rarely have that window
selected, so the compilation output disappears past the bottom of the window.
This automatically scrolls the compilation window so I can always see the
output.

#+BEGIN_SRC emacs-lisp
  (setq compilation-scroll-output t)
#+END_SRC
** flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck)
  (use-package flymake-eslint)
#+END_SRC
** Projectile
Projectile's default binding of =projectile-ag= to =C-c p s s= is clunky enough
that I rarely use it (and forget it when I need it). This binds the
easier-to-type =C-c C-v= and =C-c v= to useful searches.

#+BEGIN_SRC emacs-lisp
;; set the PATH properly
  (let* ((path (shell-command-to-string "/bin/bash -c 'source ~/.bash_profile && printf $PATH'")))
    (setenv "PATH" path)
    (mapc (lambda (p)
	    (add-to-list 'exec-path p))
	  (split-string path ":")))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package projectile)
  ;;(use-package projectile-rails)
  (use-package helm-projectile)
  (helm-projectile-on)
  (setq projectile-completion-system 'helm)
  ;;(setq ack-executable "/usr/local/bin/ack")
  (defun hrs/search-project-for-symbol-at-point ()
    "Use `projectile-ag' to search the current project for `symbol-at-point'."
    (Interactive)
    (Projectile-Ack (Projectile-Symbol-At-Point)))

  (global-set-key (kbd "C-c v") 'helm-projectile-ack)
  (global-set-key (kbd "C-c C-v") 'hrs/search-project-for-symbol-at-point)
#+END_SRC

When I visit a project with =projectile-switch-project=, the default action is
to search for a file in that project. I'd rather just open up the top-level
directory of the project in =dired= and find (or create) new files from there.

#+BEGIN_SRC emacs-lisp
  (setq projectile-switch-project-action 'projectile-dired)
#+END_SRC

I'd like to /always/ be able to recursively fuzzy-search for files, not just
when I'm in a Projecile-defined project. This uses the current directory as a
project root (if I'm not in a "real" project).

#+BEGIN_SRC emacs-lisp
  (setq projectile-require-project-root nil)
#+END_SRC
** Magit

I bring up the status menu with =C-x g=.

Use =evil= keybindings with =magit=.

The default behavior of =magit= is to ask before pushing. I haven't had any
problems with accidentally pushing, so I'd rather not confirm that every time.

Per [[http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html][tpope's suggestions]], highlight commit text in the summary line that goes
beyond 50 characters.

Enable spellchecking when writing commit messages.

I sometimes use =git= from the terminal, and I'll use =emacsclient --tty= to
write commits. I'd like to be in the insert state when my editor pops open for
that.

I'd like to start in the insert state when writing a commit message.

Allow git commit messages to use the current emacs instance.
#+BEGIN_SRC emacs-lisp
  (use-package with-editor)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind ("C-x g" . magit-status)

    :config
    (use-package evil-magit)
    (setq magit-push-always-verify nil)
    (setq git-commit-summary-max-length 50)
    (add-hook 'git-commit-mode-hook 'turn-on-flyspell)
    (add-hook 'with-editor-mode-hook 'evil-insert-state)
#+END_SRC

#+BEGIN_SRC emacs-lisp
    ;; If the branch has a jira ticket, also add that on the commit message

    (add-hook 'git-commit-setup-hook
        '(lambda ()
            (let ((has-ticket-title (string-match "^[A-Z]+-[0-9]+"
                                        (magit-get-current-branch)))
                  (words (s-split-words (magit-get-current-branch))))
              (if has-ticket-title
                 (insert (upcase(format "[%s-%s] " (car words) (car (cdr words)))))))))
#+END_SRC

** Auto complete
#+BEGIN_SRC emacs-lisp
(use-package auto-complete)
(ac-config-default)
(setq ac-auto-start t)
#+END_SRC
** CSS and Sass

Indent by 2 spaces.

#+BEGIN_SRC emacs-lisp
  (use-package css-mode
    :config
    (setq css-indent-offset 2))
#+END_SRC

Don't compile the current SCSS file every time I save.

#+BEGIN_SRC emacs-lisp
  (use-package scss-mode
    :config
    (setq scss-compile-at-save nil))
#+END_SRC
** JavaScript and CoffeeScript

Indent everything by 2 spaces.

#+BEGIN_SRC emacs-lisp
  (setq js-indent-level 2)

  (add-hook 'coffee-mode-hook
            (lambda ()
              (setq coffee-tab-width 2)))
#+END_SRC

** Ruby and Rspec

Use rbenv to manage the Ruby version
Commented out as using system ruby
#+BEGIN_SRC emacs-lisp
;(use-package rbenv)
;(global-rbenv-mode)
#+END_SRC

Basic packages needed for Ruby / RSpec
#+BEGIN_SRC emacs-lisp
  (use-package inf-ruby)
  (use-package rspec-mode)
  (use-package rubocop)
  (use-package ruby-compilation)
  (use-package ruby-end)
  (use-package yaml-mode)
  (use-package rhtml-mode)
#+END_SRC

To Use binding.pry in emacs
When you've hit the breakpoint, hit C-x C-q to enable inf-ruby.
#+BEGIN_SRC emacs-lisp
  (add-hook 'after-init-hook 'inf-ruby-switch-setup)
#+END_SRC

I like running Rubocop through Flycheck, but it also invokes Reek, which I've
found to be more of a nuisance than a help. This disables the =ruby-reek=
checker:

#+BEGIN_SRC emacs-lisp
  (setq-default flycheck-disabled-checkers '(ruby-reek))
#+END_SRC

Enable binding.pry to work with RSpec
#+BEGIN_SRC emacs-lisp
(add-hook 'after-init-hook 'inf-ruby-switch-setup)
#+END_SRC
There are a bunch of things I'd like to do when I open a Ruby buffer:

- I don't want to insert an encoding comment.
- I want to enable =yas=, =rspec=, =flycheck=
- I'd like my RSpec tests to be run in a random order, and I'd like the output
  to be colored.

#+BEGIN_SRC emacs-lisp
  (add-hook 'ruby-mode-hook
            (lambda ()
              (setq ruby-insert-encoding-magic-comment nil)
              (rspec-mode)
              (flycheck-mode)
              (local-set-key "\r" 'newline-and-indent)
              (setq rspec-command-options "--color --order random")
              ))
#+END_SRC

I associate =ruby-mode= with Gemfiles, gemspecs, Rakefiles, and Vagrantfiles.

#+BEGIN_SRC emacs-lisp
  (hrs/add-auto-mode
   'ruby-mode
   "\\Gemfile$"
   "\\.rake$"
   "\\.gemspec$"
   "\\Guardfile$"
   "\\Rakefile$"
   "\\Vagrantfile$"
   "\\Vagrantfile.local$")
#+END_SRC

When running RSpec tests I'd like to scroll to the first error.

#+BEGIN_SRC emacs-lisp
  (add-hook 'rspec-compilation-mode-hook
            (lambda ()
              (make-local-variable 'compilation-scroll-output)
              (setq compilation-scroll-output 'first-error)))
#+END_SRC

Syntax highlighting for Gherkin Syntax

#+BEGIN_SRC emacs-lisp
  (use-package feature-mode)
#+END_SRC
** Common Lisp
#+BEGIN_SRC emacs-lisp
  (use-package ac-slime)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package slime
      :init
      (setq inferior-lisp-program "sbcl")
      (slime-setup '(slime-fancy
         slime-asdf
    slime-banner)))
#+END_SRC
** PlantUML
Quickly write UML documents using markup
#+BEGIN_SRC emacs-lisp
    (use-package plantuml-mode)
  ;; Enable plantuml-mode for PlantUML files
  (add-to-list 'auto-mode-alist '("\\.plantuml\\'" . plantuml-mode))
  (add-to-list 'auto-mode-alist '("\\.puml\\'" . plantuml-mode))
  (setq plantuml-jar-path (concat "/usr/share/java/plantuml/" "plantuml.jar"))
#+END_SRC
** Elixir

#+BEGIN_SRC emacs-lisp
(use-package alchemist
  :config
  (add-hook 'elixir-mode-hook 'alchemist-mode))

(use-package flycheck-elixir
  :config
  (add-hook 'elixir-mode-hook 'flycheck-mode))

(use-package elixir-mode)

(provide 'lang-elixir)

#+END_SRC
* Terminal

I use =multi-term= to manage my shell sessions. It's bound to =C-c t=.

#+BEGIN_SRC emacs-lisp
(use-package multi-term)
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c t") 'multi-term)
#+END_SRC

Use a login shell:

#+BEGIN_SRC emacs-lisp
  (setq multi-term-program-switches "--login")
#+END_SRC

I'd rather not use Evil in the terminal. It's not especially useful (I don't use
vi bindings in xterm) and it shadows useful keybindings (=C-d= for EOF, for
example).

#+BEGIN_SRC emacs-lisp
  (evil-set-initial-state 'term-mode 'emacs)
#+END_SRC

I add a bunch of hooks to =term-mode=:

- I'd like links (URLs, etc) to be clickable.
- Yanking in =term-mode= doesn't quite work. The text from the paste appears in
  the buffer but isn't sent to the shell process. This correctly binds =C-y= and
  middle-click to yank the way we'd expect.
- I bind =M-o= to quickly change windows. I'd like that in terminals, too.
- I don't want to perform =yasnippet= expansion when tab-completing.

#+BEGIN_SRC emacs-lisp
  (defun hrs/term-paste (&optional string)
    (interactive)
    (process-send-string
     (get-buffer-process (current-buffer))
     (if string string (current-kill 0))))

  (add-hook 'term-mode-hook
            (lambda ()
              (goto-address-mode)
              (define-key term-raw-map (kbd "C-y") 'hrs/term-paste)
              (define-key term-raw-map (kbd "<mouse-2>") 'hrs/term-paste)
              (define-key term-raw-map (kbd "M-o") 'other-window)
              (setq yas-dont-activate t)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun ignore-changes-in-term-buffers ()
  (add-hook 'after-change-functions
            (lambda (a b c)
              (set-buffer-modified-p nil))
            nil
            t))

(add-hook 'term-mode-hook
          'ignore-changes-in-term-buffers
          nil
          t)
#+END_SRC
* Publishing and task management with Org-mode
** Display preferences

Install the latest version of org
#+BEGIN_SRC emacs-lisp
  (use-package org)
#+END_SRC

I like to see an outline of pretty bullets instead of a list of asterisks.

#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :init
    (add-hook 'org-mode-hook #'org-bullets-mode))
#+END_SRC

I like seeing a little downward-pointing arrow instead of the usual ellipsis
(=...=) that org displays when there's stuff under a header.

#+BEGIN_SRC emacs-lisp
  (setq org-ellipsis "⤵")
#+END_SRC

Use syntax highlighting in source blocks while editing.

#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
#+END_SRC

Make TAB act as if it were issued in a buffer of the language's major mode.

#+BEGIN_SRC emacs-lisp
  (setq org-src-tab-acts-natively t)
#+END_SRC

When editing a code snippet, use the current window rather than popping open a
new one (which shows the same information).

#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
#+END_SRC

Quickly insert a block of elisp:

#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
               '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC

Enable spell-checking in Org-mode.

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'flyspell-mode)
#+END_SRC
** Org defaults

	 Add Line wrapping in org mode

	 #+BEGIN_SRC emacs-lisp
     (add-hook 'org-mode-hook
               '(lambda ()
                  (visual-line-mode 1)))
     ;; This line is mysteriously needed to get rid of this error:
     ;; Error running timer ‘org-indent-initialize-agent’: (void-function org-time-add)
     (org-reload)
     (add-hook 'org-mode-hook 'org-indent-mode)
	 #+END_SRC

   Associate files for org mode
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\|txt\\)$" . org-mode))
   #+END_SRC

#+BEGIN_SRC emacs-lisp
  (define-key global-map "\C-cl" #'org-store-link)
  (define-key global-map "\C-ca" #'org-agenda)
  (define-key global-map "\C-cc" #'org-capture)
#+END_SRC

  Fast TODO state in org
  Done with C-c C-t KEY
  ,#+BEGIN_SRC emacs-lisp
    (setq org-use-fast-todo-selection t)
#+END_SRC

Set the languages for babel languages
#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((C . t)
   (calc . t)
   (clojure . t)
   (haskell . t)
   (gnuplot . t)
   (java . t)
   (js . t)
   (latex . t)
   (ledger . t)
   (lisp . t)
   (org . t)
   (python . t)
   (scheme . t)
   (shell . t)
   (sqlite . t)
   (python . t)))
#+END_SRC

** GTD
#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates '(("t" "Todo [inbox]" entry
                                 (file+headline "~/Documents/org/gtd/inbox.org" "Tasks")
                                 "* TODO %i%?")
                                ("T" "Tickler" entry
                                 (file+headline "~/Documents/org/gtd/tickler.org" "Tickler")
                                 "* %i%? \n %U")
                                ("j" "Journal entry" entry (function org-journal-find-location)
                                 "* %(format-time-string org-journal-time-format)%^{Title}\n%i%?")))
#+END_SRC

Default notes
#+BEGIN_SRC emacs-lisp
  (setq org-default-notes-file "~Documents/org/gtd/inbox.org")
#+END_SRC

Refile files
C-c C-w prompts me either for a project, the tickler, or someday/maybe list.

#+BEGIN_SRC emacs-lisp
  (setq org-refile-targets `(("~/Documents/org/gtd/gtd.org" :maxlevel . 3)
                             ("~/Documents/org/gtd/someday.org" :level . 1)
                             ("~/Documents/org/gtd/tickler.org" :maxlevel . 2)
                             ("~/Documents/org/gtd/inbox.org" :maxlevel . 1)))
#+END_SRC

TODO Keywords
#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords '((sequence "TODO(t)" "WAITING(w)" "|" "DONE(d)" "CANCELLED(c)")))
#+END_SRC

Filtering agenda views

#+BEGIN_SRC emacs-lisp
    (setq org-agenda-custom-commands
          '(
           ("h" "At Home" tags-todo "@home"
             ((org-agenda-overriding-header "Home")
              (org-agenda-skip-function #'my-org-agenda-skip-all-siblings-but-first)))
           ("c" "At Computer" tags-todo "@computer"
           ((org-agenda-overriding-header "Computer (Personal)")
            (org-agenda-skip-function #'my-org-agenda-skip-all-siblings-but-first)))
           ("n" "NOTHS" tags-todo "@noths"
           ((org-agenda-overriding-header "Notonthehighstreet.com")
            (org-agenda-skip-function #'my-org-agenda-skip-all-siblings-but-first)))
           ("p" "Calls" tags-todo "@calls"
           ((org-agenda-overriding-header "Calls to make")
            (org-agenda-skip-function #'my-org-agenda-skip-all-siblings-but-first)))
           ("E" "Errands" tags-todo "@errands"
             ((org-agenda-overriding-header "Errands")))
           ("r" "Read/Review" tags-todo "@read"
             ((org-agenda-overriding-header "Read/Review")))
  ))

    (defun my-org-agenda-skip-all-siblings-but-first ()
      "Skip all but the first non-done entry."
      (let (should-skip-entry)
        (unless (org-current-is-todo)
          (setq should-skip-entry t))
        (save-excursion
          (while (and (not should-skip-entry) (org-goto-sibling t))
            (when (org-current-is-todo)
              (setq should-skip-entry t))))
        (when should-skip-entry
          (or (outline-next-heading)
              (goto-char (point-max))))))

    (defun org-current-is-todo ()
      (string= "TODO" (org-get-todo-state)))
#+END_SRC
** Org-Journal
Add Journal entries using org-journal
    C-c C-f - go to the next journal file.
    C-c C-b - go to the previous journal file.
    C-c C-j - insert a new entry into the current journal file (creates the file if not present).
    C-c C-s - search the journal for a string.

#+BEGIN_SRC emacs-lisp
  (use-package org-journal
    :init (setq org-journal-dir "~/Documents/org/journal/")
  )

  (defun org-journal-find-location ()
    ;; Open today's journal, but specify a non-nil prefix argument in order to
    ;; inhibit inserting the heading; org-capture will insert the heading.
    (org-journal-new-entry t)
    ;; Position point on the journal's top-level heading so that org-capture
    ;; will add the new entry as a child entry.
    (goto-char (point-min)))
#+END_SRC
** Agenda settings
	 #+BEGIN_SRC emacs-lisp
     (setq org-agenda-files
           (list "~/Documents/org/gtd/inbox.org"
                 "~/Documents/org/gtd/tickler.org"
                 "~/Documents/org/gtd/gtd.org"
                 "~/Documents/org/calendars/kc-cal.org"
                 "~/Documents/org/calendars/noths-cal.org"))
	 #+END_SRC
** org-roam
A org clone of roam
https://blog.jethro.dev/posts/introducing_org_roam/

#+BEGIN_SRC emacs-lisp
(use-package org-roam
      :hook
      (after-init . org-roam-mode)
      :straight (:host github :repo "jethrokuan/org-roam")
      :custom
      (org-roam-directory "/home/hamza/Documents/org/")
      :bind (:map org-roam-mode-map
              (("C-c n l" . org-roam)
               ("C-c n f" . org-roam-find-file)
               ("C-c n g" . org-roam-show-graph))
              :map org-mode-map
              (("C-c n i" . org-roam-insert))))
#+END_SRC
* Editing Settings
** Mass editing of =grep= results

I like the idea of mass editing =grep= results the same way I can edit filenames
in =dired=. These keybindings allow me to use =C-x C-q= to start editing =grep=
results and =C-c C-c= to stop, just like in =dired=.

#+BEGIN_SRC emacs-lisp
  (eval-after-load 'grep
    '(define-key grep-mode-map
      (kbd "C-x C-q") 'wgrep-change-to-wgrep-mode))

  (eval-after-load 'wgrep
    '(define-key grep-mode-map
      (kbd "C-c C-c") 'wgrep-finish-edit))

  (setq wgrep-auto-save-buffer t)
#+END_SRC

** Split horizontally for temporary buffers

Horizonal splits are nicer for me, since I usually use a wide monitor. This is
handy for handling temporary buffers (like compilation or test output).

#+BEGIN_SRC emacs-lisp
  (defun hrs/split-horizontally-for-temp-buffers ()
    (when (one-window-p t)
      (split-window-horizontally)))

  (add-hook 'temp-buffer-window-setup-hook
            'hrs/split-horizontally-for-temp-buffers)
#+END_SRC

** Use projectile everywhere

#+BEGIN_SRC emacs-lisp
  (projectile-global-mode)
#+END_SRC

** Add a bunch of engines for =engine-mode=

Enable [[https://github.com/hrs/engine-mode][engine-mode]] and define a few useful engines.

#+BEGIN_SRC emacs-lisp
  (use-package engine-mode)
  (require 'engine-mode)
  (setq engine/browser-function 'browse-url-firefox)

  (defengine duckduckgo
    "https://duckduckgo.com/?q=%s"
    :keybinding "d")

  (defengine github
    "https://github.com/search?ref=simplesearch&q=%s"
    :keybinding "g")

  (defengine google
    "http://www.google.com/search?ie=utf-8&oe=utf-8&q=%s")

  (defengine rfcs
    "http://pretty-rfc.herokuapp.com/search?q=%s")

  (defengine stack-overflow
    "https://stackoverflow.com/search?q=%s"
    :keybinding "s")

  (defengine wikipedia
    "http://www.wikipedia.org/search-redirect.php?language=en&go=Go&search=%s"
    :keybinding "w")

  (defengine wiktionary
    "https://www.wikipedia.org/search-redirect.php?family=wiktionary&language=en&go=Go&search=%s")

  (defengine youtube
    "https://www.youtube.com/results?search_query=%s")

  (engine-mode t)
#+END_SRC

** Switch and rebalance windows when splitting

When splitting a window, I invariably want to switch to the new window. This
makes that automatic.

#+BEGIN_SRC emacs-lisp
  (defun hrs/split-window-below-and-switch ()
    "Split the window horizontally, then switch to the new pane."
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))

  (defun hrs/split-window-right-and-switch ()
    "Split the window vertically, then switch to the new pane."
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))

  (global-set-key (kbd "C-x 2") 'hrs/split-window-below-and-switch)
  (global-set-key (kbd "C-x 3") 'hrs/split-window-right-and-switch)
#+END_SRC

** Switch Window
#+BEGIN_SRC emacs-lisp
(use-package switch-window
  :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
        '("a" "s" "d" "f" "j" "k" "l" "i" "o"))
  :bind
    ([remap other-window] . switch-window))
#+END_SRC
** Buffers

Doing C-x k should kill the current buffer at all times
#+BEGIN_SRC emacs-lisp
(defun kill-current-buffer ()
  "Kills the current buffer."
  (interactive)
  (kill-buffer (current-buffer)))
(global-set-key (kbd "C-x k") 'kill-current-buffer)
#+END_SRC

Close all open buffers
#+BEGIN_SRC emacs-lisp
(defun close-all-buffers ()
  "Kill all buffers without regard for their origin."
  (interactive)
  (mapc 'kill-buffer (buffer-list)))
(global-set-key (kbd "C-M-s-k") 'close-all-buffers)
#+END_SRC
* Set custom keybindings

Just a few handy functions.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-w") 'backward-kill-word)
  (global-set-key (kbd "M-/") 'hippie-expand)
  (global-set-key (kbd "M-o") 'other-window)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (global-unset-key (kbd "C-x m")) ; I don't use mail
#+END_SRC

Remap when working in terminal Emacs.

#+BEGIN_SRC emacs-lisp
  (define-key input-decode-map "\e[1;2A" [S-up])
#+END_SRC
* Minor conveniences
** Visiting the configuration
Quickly edit ~/.emacs.d/config.org

#+BEGIN_SRC emacs-lisp
(defun config-visit ()
  (interactive)
  (find-file "~/.emacs.d/configuration.org"))
(global-set-key (kbd "C-c e") 'config-visit)
#+END_SRC
** Reload config
	 Simply pressing Control-c r will reload this file, very handy. You can also manually invoke config-reload.

#+BEGIN_SRC emacs-lisp
(defun config-reload ()
  "Reloads ~/.emacs.d/config.org at runtime"
  (interactive)
  (org-babel-load-file (expand-file-name "~/.emacs.d/configuration.org")))
(global-set-key (kbd "C-c r") 'config-reload)

#+END_SRC
** Electric
If you write any code, you may enjoy this. Typing the first character in a set of 2, completes the second one after
your cursor. Opening a bracket? It’s closed for you already. Quoting something? It’s closed for you already.

#+BEGIN_SRC emacs-lisp
(setq electric-pair-pairs '(
                           (?\{ . ?\})
                           (?\( . ?\))
                           (?\[ . ?\])
                           (?\" . ?\")
                           (?\' . ?\')
                           ))
(electric-pair-mode t)
#+END_SRC
** Beacon
While changing buffers or workspaces, the first thing you do is look for your cursor. Unless you know its position,
you can not move it efficiently. Every time you change buffers, the current position of your cursor will be briefly highlighted now.

#+BEGIN_SRC emacs-lisp
#+END_SRC
